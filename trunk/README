==========
Formulaic
==========
----------------------------
A python web form generator
----------------------------

Introduction
=============

Formulaic is a Python package for generating the html of web forms.  It is
designed to interoperate closely with the excellent FormEncode
(http://formencode.org) form validation framework.  Formulaic was written for
use with a project built using the Cherrypy web framework, but is intended to be
usable with other Python web frameworks too.

Formulaic is not intended to be the One True form generation framework for
Python.  That framework may someday exist, but formulaic is not it.  Formulaic
instead is intended to be easily usable for common web development needs, and
tries not to sacrifice usability for small increases in expressive power.  Its
feature set currently includes support for error messages, default values,
intelligent detection and rendering of required fields, and, above all,
customization of the output html.

This file provides a tutorial on formualic's use, as well as the beginnings of
an API reference, but as always, the best guide to its use is the source itself.
The code is really quite simple, and almost everything can be efficiently
customized through subclassing.  Questions, suggestions, and death threats are
welcome at greg.steffensen@gmail.com .

Overview
=============

Formulaic is fundmentally concerned with *rendering*.  To use formulaic, you
basically create your form once, then render it whenever a user views that
form in her browser.  Most of the work of creating a form, in turn, is in
describing the various fields in the form.  Forms and fields are the two
fundamental kinds of objects in the formulaic universe (note that this is
slightly different from how FormEncode works; in FormEncode, forms (schemas) are just a
special kind of field (validator)).

So in formulaic, forms contain fields.  Specifically, forms act like *ordered
dictionaries* of fields, which means that they can be used like normal python
dictionaries.  However, unlike normal python dictionaries, they keep track of
the order in which elements are added.  This makes it easier for you to control
in what order fields are shown when you render the form (don't worry, if you
want to change this ordering you can... the short answer is to use "sequence"
attribute).  Thus, to render itself, a form just renders its fields one-by-one,
and then wraps this output in a form template.

To simplify the use of formualic with FormEncode, field objects are actually
just FormEncode validators, with an extra "renderer" attribute.  Form objects,
in turn, contain a FormEncode schema, stored in the "schema" attribute.  Again,
to reiterate, fields ARE validators, and forms CONTAIN schemas (we decided not
to make forms actually be schemas to avoid some bugs involving recursion).
Thus, if you have a field object "myfield", you can use all the formencode
methods on it, such as "myfield.to_python(value)".  And if you have a form
object "myform", you can call "myform.schema.to_python(values)".  Formulaic does
not alter the behavior of the FormEncode code at all.  

Formulaic uses one trick to provide clean integration of the form and schema
objects.  FormEncode schemas store their validators in a "fields" attribute.  In
a formulaic form, this attribute of the schema gets set to the form itself.  In
other words, "myform.schema.fields" points to "myform" itself (a circular
reference).  So if a field gets added to or deleted from the form, the field
will also be added to or deleted from the validation process.

Installation
=============

Formulaic has two dependencies: Python 2.4 (available at http://www.python.org)
, and FormEncode (available at http://formencode.org).  It was built using
FormEncode 0.22, but I expect that prior versions will work fine as well.  There
are several ways to install FormEncode, but the canonical one is download,
extract, "python setup.py install".

Once Python and FormEncode are installed, formulaic may be installed by
downloading, extracting, and running "python setup.py install".

Formulaic was built for use with Cherrypy, but the examples in this tutorial can
all be executed from the python interactive interpreter.  For an example of how
to typically use formulaic with cherrypy, see the file "cherrypy_example.py" in
the examples directory.

Tutorial
===========

You can run all the code in this tutorial from the python interpreter, without
setting up a web server.  For an example of how to use formulaic from within
Cherrypy, see the "cherrypy_example.py" file in the "examples" directory.

hello world
--------------

Lets jump right in.  The first thing to learn about formulaic is that validation
and rendering COMPLETELY separate activities::

    >>> from formencode import validators
    >>> from formulaic import forms
    >>> from formulaic import basicwidgets as widgets
    >>> form = forms.BaseForm()
    >>> form['hello'] = widgets.TextInput(validators.MaxLength(5), 'Hello')
    >>> values = {'hello':'world'}
    >>> print form.smartRender(values, {})
    <form action="" method="POST">

    <label>Hello</label>
    <input type="text" name="hello" value="world"/>

    <input type="submit" value="Submit"/>

    </form>
    >>>

Ok, what's going on?  We've created a very simple form that does some very
simple validation.  That form has one field, stored at the 'hello' key.  In
formulaic, a field's key becomes its name its rendered with in the form.  We've
based that field on a FormEncode validator, one that checks whether its inputs
have a length of 5 or less.  To create the field, we used the *TextInput* field
transformer function.  Like all the field transformer functions, *TextInput*
takes a validator object and a label, and returns a field object based on that
validator.  The field object is basically a copy of the original validator (a
real copy, not the original object), with one new attribute "renderer".  Once
this field object is placed in the form, we use the form's *smartRender* method
to render the form.  This method takes two arguments: a dictionary of prefilled
values for the various widgets, and a dictionary of error messages for the
various widgets.

Lets render again, with an error message this time::

    >>> errors = {'hello':"Your mama"}
    >>> print form.render(values, errors)
    <form action="" method="POST">

    <label>Hello</label>
    <input type="text" name="hello" value="world"/>
    <span class="error">Your mama</span>

    <input type="submit" value="Submit"/>

    </form>

That's how formulaic gets its error messages.  Despite partial integration with
FormEncode, it doesn't do any validation itself; whether the values for
prefilling are valid or invalid has no effect on the rendering of error
messages.  To get our error messages dynamically from FormEncode, we have to
explicitly validate::

    >>> from formencode.api import Invalid
    >>> values = {'hello':'planet'}
    >>> try:
    ...     values = form.schema.to_python(values)
    ... except Invalid, error:
    ...     print form.render(values, error.error_dict)
    ...
    <form action="" method="POST">

    <label>Hello</label>
    <input type="text" name="hello" value="planet"/>
    <span class="error">Enter a value less than 5 characters long</span>

    <input type="submit" value="Submit"/>

    </form>

The code above is the canonical way for formulaic to be used.  The *Invalid*
exception raised when FormEncode validation fails has an *error_dict* attribute
that is a dict mapping field names to other *Invalid* objects.  Those internal
*Invalid* objects render themselves into user-friendly strings.  While in
practice you'll often want to use a try-catch block like the one above, for now
we'll skip the validation process to save space.

Note that one side effect of splitting up validation and rendering like this is
that if you want to do extra validation after FormEncode finishes (or if you
don't want to use FormEncode at all), you can do whatever you want just be
setting the values of the error dictionary parameter appropriately.

Lets customize the field some more::

    >>> form['hello'].default = 'world'
    >>> form['hello'].attrs = {'style':'width:3in'}
    >>> print form.render({}, {})
    <form action="" method="POST">

    <label>Hello</label>
    <input style="width:3in" type="text" name="hello" value="world"/>

    <input type="submit" value="Submit"/>

    </form>

We've introduced two more of formulaic's features.  The default attribute on
fields does just what you'd think: it supplies a default value for rendering.
Now, remember how we said that validation and rendering are completely separate
activities?  That applies here too.  FormEncode offers default values too, but
the rendering process doesn't use those at all.  In practice, if you want
default values for your fields, you'll typically want the formulaic method.

The other feature we introduced is the *attrs* attribute.  This is the simplest
way to customize the rendering of your fields.  If you want to set html
attribute values on your fields, you can use the attrs dictionary.  Attribute
names and values will all be properly escaped for you.  BaseForm objects
actually take an *attrs* parameter too, which works similarly.

This is also a good time to introduce a new formulaic term: **widgets**.  In
formulaic, a widget is the core of a field; its the actual input element that
users use to enter their data.  In terms of rendering, fields are widgets, plus
"window dressing" like labels and error messages.  The distinction will become
more important when we start customizing our forms, and the way that labels and
error messages are displayed on fields becomes variable (however, the widget portion
for any particular field object will render the same, regardless of what kind of
form its associated with).  Here, the *attrs* attribute customizes *widget*
display.

Customizing form rendering
------------------------------

So far, we've learned how to create field objects from validators, how to add
them to forms, how to render forms, and how to do basic customization of the
way that fields are rendered.  But the html that we've produced pretty much
sucked.  It probably wouldn't integrate very well into the visual style of most
real world sites.  If you used CSS effectively, you might be able to make it
work, but it would be tricky, especially given Internet Explorer's poor support
for advanced CSS selectors.  Is there a way to easily make formulaic's html
match your site's style better?

Sure.  If you examine the form object we created, you'll notice that it has
quite a few attributes that end with the letters "Tpl"; for example, *formTpl*,
*normalFieldTpl* and *labelTpl*.  Unsurprisingly, these all contain various
templates for the form rendering process.  By changing them, we can change the
way that fields (but not widgets) are rendered::

    >>> form.normalFieldTpl = '<div class="formfield">\n$label \n<br/>\n$widget \n$error</div>'
    >>> print form.render({}, {})
    <form action="" method="POST">

    <div class="formfield">
    <label>Age</label>
    <br/>
    <input type="text" name="age" value=""/>
    </div>

    <div class="formfield">
    <label>Favorite color</label>
    <br/>
    <select type="text" name="favcolor">
    <option value="Red">Red</option>
    <option value="Green">Green</option>
    <option value="Blue">Blue</option>
    </select>
    </div>

    <input type="hidden" name="user_id" value=""/>

    <div class="formfield">

    <br/>
    <input type="submit" value="Submit"/>
    </div>

    </form>


All of the BaseForm template attribute are used in python Template strings (a
new class introduced in Python 2.4), and take their own set of identifiers into
which dynamic values are substituted.  Here, we've altered the "normalFieldTpl"
attribute, putting a wrapper *<div/>* around it, and added a *<br/>* between the
label and the widget (against our better judgement :).  We've kept the three
identifiers in the original version: *$label*, *widget*, and *error* (these are
the only three identifiers that *normalFieldTpl* can use).

But did you notice that one field wasn't affected?  That's right, the hidden
"user_id" field didn't get any of that extra markup we added.  That's because
hidden fields don't get rendered with the, er, normal field template.  In many
forms, things would probably work out fine if they did, but its possible to
imagine situations in which the presence of hidden fields rendered like this
would alter the appearance of the form (which hidden inputs, after all, are not
supposed to do).  So hidden fields get rendered with another template:
*bareFieldTpl*.  The *bareFieldTpl* attribute can take the same identifiers
that *normalFieldTpl* does, but you typically won't want to even include label
or errors; they aren't useful in this context (and the default value for
*bareFieldTpl* in fact doesn't use them). 

How does the form know that hidden fields get this special treatment?  Because
the *renderer* attribute of hidden fields itself has an attribute called
*renderBare* that is set to True.  I originally created this second rendering
mode to deal with hidden fields, but its concievably useful in other contexts,
such as for the insertion of static content, like instructions, midway through
the form.

We won't go through the other form template attributes, since they're pretty
self explanatory.  Just note the contents of *labelTpl* and *errorTpl* have
the potential to be ignored completely, if there's no label or no error message
associated with a field when its rendered.  In those cases, those templates are
replaced with the empty string.
